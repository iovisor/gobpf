// Code generated by go-bindata.
// sources:
// ../dist/gettimeofday-bpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _gettimeofdayBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x93\x31\x6f\xd3\x40\x14\xc7\xff\x97\x26\x75\x6b\x21\x94\x01\xa1\x92\x85\x2c\x48\x65\x49\x09\x9f\xa0\x0b\x45\x42\x1d\xf8\x04\x58\x2e\xb9\x56\x51\x6b\x3b\xf2\x1d\x6d\x83\x85\x58\x60\x61\x60\x02\x89\x11\x24\x06\xbe\x41\xc6\x5b\x3b\x32\x76\x64\x64\xec\x06\x13\x87\xee\xee\x19\xbb\xe7\x58\x11\x4f\xb2\xff\x7e\xbf\xcb\xcb\xff\xbd\x3b\xfb\xf5\xa3\xfd\xbd\x0e\x63\x28\x83\xe1\x17\xaa\xac\x8a\xcf\x9d\xea\x79\x97\xee\x21\x18\xd4\x6d\xc7\xde\x02\xb8\x09\x40\x6d\x54\xb9\x79\x54\x41\x95\xf7\x00\x14\xe1\xa5\x36\xf9\x51\x00\x0c\x01\x9c\x91\x16\x2f\x7f\x58\x5e\xbc\xfb\x69\x75\x41\x4d\x14\x83\xdf\x8e\x0f\xae\xac\xaa\x2f\x8e\x07\x0c\xb8\xd2\x5a\x2f\x3a\x40\x9f\xfe\xdf\xa8\xfa\x4a\xeb\x5d\xe0\x52\x6b\xad\x62\x97\x6f\x75\xae\xcf\xa3\x84\xd3\x45\x0f\xd8\xa6\xfa\x3b\xe6\x77\x0c\x78\x91\xc6\x89\x59\xe3\xc3\x7b\x93\x62\x70\xf1\xaf\x9f\x10\xc0\xf1\xe0\x7b\xa3\x8f\x0b\xea\xc3\xac\xab\xb5\x6a\xde\x75\x53\x47\x7e\x1f\x49\xbb\xb5\xcb\xdd\x9c\x9f\xf1\x0a\xf1\xf8\xe9\x3e\x80\x3f\x5a\xeb\x25\x47\x60\x63\xdb\xce\x19\x34\xf8\x5d\xcb\x37\x1a\xfc\x86\xe5\xbd\x06\x1f\x5b\xbe\xd6\xe0\xdf\x48\xcd\xf6\xdb\xd5\x91\xe4\xe7\x12\x49\x3c\x13\x3b\x47\x5c\xca\x69\xc2\xb3\xc3\x49\x3c\x8f\xf8\x29\x4f\x25\xa2\x53\x9e\x8b\x69\x96\x22\x3a\x99\x3e\xe7\xa9\xe0\x38\x9e\xe5\xd9\x01\x8f\x22\x31\x17\x51\xca\xcf\xec\x6c\x18\xe5\xfc\xc4\x2d\xec\x5c\xe7\x42\xe6\x32\x3e\xc0\x48\xcc\x13\xab\x79\x36\x89\x65\x6c\xf0\x78\x34\x6e\xdb\x83\xff\x89\x67\xe5\x1c\x5e\x0c\xe9\x7d\x78\xe5\x71\xff\xdd\x67\x74\xad\x7b\x7c\xb7\xc5\xaf\xeb\xe5\x4f\x56\xd4\x3f\xf0\x0c\xfd\x13\xdc\x03\xb0\xb9\xc4\xa7\x4f\xfd\xf7\x29\xdf\xa4\x39\xcb\xfa\x92\x07\xf5\xb3\xac\xc5\x8c\x7c\x6f\xad\xe8\x3f\xa5\xfa\x87\x1e\x7f\x43\xf5\xa1\xc7\x99\xa7\xf7\x5b\xfc\xdf\xb3\xe5\x7e\xfe\xfe\x0f\x5b\xea\x3f\xb4\xd4\xfb\xf9\x21\x00\xef\xd3\xb7\xf1\x89\xea\xcf\x6b\xbe\xac\xb6\x7f\x5b\xa4\x7f\x03\x00\x00\xff\xff\xcd\xe8\x75\x00\x20\x05\x00\x00")

func gettimeofdayBpfOBytes() ([]byte, error) {
	return bindataRead(
		_gettimeofdayBpfO,
		"gettimeofday-bpf.o",
	)
}

func gettimeofdayBpfO() (*asset, error) {
	bytes, err := gettimeofdayBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gettimeofday-bpf.o", size: 1312, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gettimeofday-bpf.o": gettimeofdayBpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"gettimeofday-bpf.o": &bintree{gettimeofdayBpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

